//通过是否是组件加载来设置启动的模式
if (rootProject.ext.androidConfig.loginIsApp){
    apply plugin: 'com.android.application'
}else {
    apply plugin: 'com.android.library'
}

android {
    def gradleConfig = rootProject.extensions.getByName("ext")

    compileSdkVersion gradleConfig["compileSdkVersion"]
    buildToolsVersion gradleConfig["buildToolsVersion"]
    defaultConfig {
        //当以application启动时，需要设置对应的id
        if(rootProject.ext.androidConfig.loginIsApp){
            applicationId gradleConfig["applicationId"] + ".login"
        }
        minSdkVersion gradleConfig["minSdkVersion"]
        targetSdkVersion gradleConfig["targetSdkVersion"]
        versionCode gradleConfig["versionCode"]
        versionName gradleConfig["versionName"]
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //针对不同启动方式，需要使用不同的文件
    sourceSets {
        main{
            if(rootProject.ext.androidConfig.loginIsApp){
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //release下排除debug中所有的java文件
                java{
                    exclude 'debug/**'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:26.1.0'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

}
